{"version":3,"file":"component---src-templates-blog-post-js-9e30eee75d56eb4a284a.js","mappings":"yOAQA,MAiEaA,EAAOC,IAA8C,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,IAA3CC,MAAQC,eAAgBC,EAAI,KAAEC,IAAQT,EAE3D,MAAMU,EAAkD,QAAjCT,EAAGO,EAAKG,YAAYC,qBAAa,IAAAX,GAAiB,QAAjBC,EAA9BD,EAAgCY,uBAAe,IAAAX,GAAiB,QAAjBC,EAA/CD,EAAiDY,uBAAe,IAAAX,GAAQ,QAARC,EAAhED,EAAkEY,cAAM,IAAAX,GAAU,QAAVC,EAAxED,EAA0EY,gBAAQ,IAAAX,OAApD,EAA9BA,EAAoFY,KAGxG,MAAEC,EAAK,YAAEC,EAAW,KAAEC,EAAI,KAAEC,GAASb,EAAKG,YAG1CW,EAAgB,IAAIC,KAAKH,GAAMI,cAErC,OACEC,EAAAA,cAACC,EAAAA,EAAG,CACFR,MAAOA,EACPC,YAAaA,GAAeX,EAAKmB,QACjCC,MAAOlB,EACPmB,SAAS,EACTC,SAAUT,GAAQ,GAClBC,cAAeA,EACfS,aAAcT,GACd,EAIN,UAxFyBU,IAGO,IAAAC,EAAA,IAFJ3B,MAAM,SAAE4B,EAAQ,KAAEC,EAAI,KAAE1B,EAAMF,eAAgBC,GAAM,SACpD4B,GACDJ,EACzB,MAAMK,GAA6B,QAAjBJ,EAAAxB,EAAK6B,oBAAY,IAAAL,OAAA,EAAjBA,EAAmBf,QAAU,QACzCN,GAAgB2B,EAAAA,EAAAA,GAAS/B,EAAKG,YAAYC,eAEhD,OACEa,EAAAA,cAACe,EAAAA,EAAM,CAACJ,SAAUA,EAAUlB,MAAOmB,GACjCZ,EAAAA,cAAA,WACEgB,UAAU,YACVC,WAAS,EACTC,SAAS,6BAETlB,EAAAA,cAAA,cACEA,EAAAA,cAAA,MAAImB,SAAS,YAAYpC,EAAKG,YAAYO,OAC1CO,EAAAA,cAAA,SAAIjB,EAAKG,YAAYS,OAEtBR,GACCa,EAAAA,cAAA,UAAQgB,UAAU,kBAChBhB,EAAAA,cAACoB,EAAAA,EAAW,CAACjB,MAAOhB,EAAekC,IAAKtC,EAAKG,YAAYO,QACxDV,EAAKG,YAAYoC,cAChBtB,EAAAA,cAAA,kBAAajB,EAAKG,YAAYoC,eAIpCtB,EAAAA,cAAA,WACEuB,wBAAyB,CAAEC,OAAQzC,EAAK0C,MACxCN,SAAS,gBAEXnB,EAAAA,cAAA,WACAA,EAAAA,cAAA,cACEA,EAAAA,cAAC0B,EAAAA,EAAG,QAGR1B,EAAAA,cAAA,OAAKgB,UAAU,iBACbhB,EAAAA,cAAA,MACE2B,MAAO,CACLC,QAAU,OACVC,SAAW,OACXC,eAAiB,gBACjBC,UAAY,OACZC,QAAS,IAGXhC,EAAAA,cAAA,UACGS,GACCT,EAAAA,cAACiC,EAAAA,KAAI,CAACC,GAAIzB,EAAS0B,OAAOC,KAAMC,IAAI,QAClCrC,EAAAA,cAAA,YAAOS,EAASvB,YAAYO,SAIlCO,EAAAA,cAAA,UACGU,GACCV,EAAAA,cAACiC,EAAAA,KAAI,CAACC,GAAIxB,EAAKyB,OAAOC,KAAMC,IAAI,QAC9BrC,EAAAA,cAAA,YAAOU,EAAKxB,YAAYO,WAM3B,C","sources":["webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({\n                            data: { previous, next, site, markdownRemark: post },\n                            location,\n                          }) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n  const featuredImage = getImage(post.frontmatter.featuredImage)\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        {featuredImage && (\n          <figure className=\"featured-image\">\n            <GatsbyImage image={featuredImage} alt={post.frontmatter.title} />\n            {post.frontmatter.imageCaption && (\n              <figcaption>{post.frontmatter.imageCaption}</figcaption>\n            )}\n          </figure>\n        )}\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                <span>{previous.frontmatter.title}</span>\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                <span>{next.frontmatter.title}</span>\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post, site } }) => {\n  // Extract the featured image path for SEO\n  const featuredImagePath = post.frontmatter.featuredImage?.childImageSharp?.gatsbyImageData?.images?.fallback?.src\n  \n  // Extract frontmatter fields\n  const { title, description, date, tags } = post.frontmatter\n  \n  // Format dates in ISO format for structured data\n  const datePublished = new Date(date).toISOString()\n  \n  return (\n    <Seo\n      title={title}\n      description={description || post.excerpt}\n      image={featuredImagePath}\n      article={true}\n      keywords={tags || []}\n      datePublished={datePublished}\n      dateModified={datePublished} // Use the same date if no modified date available\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        imageCaption\n        tags\n        featuredImage {\n          childImageSharp {\n            gatsbyImageData(width: 800, layout: FULL_WIDTH)\n          }\n        }\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["Head","_ref2","_post$frontmatter$fea","_post$frontmatter$fea2","_post$frontmatter$fea3","_post$frontmatter$fea4","_post$frontmatter$fea5","data","markdownRemark","post","site","featuredImagePath","frontmatter","featuredImage","childImageSharp","gatsbyImageData","images","fallback","src","title","description","date","tags","datePublished","Date","toISOString","React","Seo","excerpt","image","article","keywords","dateModified","_ref","_site$siteMetadata","previous","next","location","siteTitle","siteMetadata","getImage","Layout","className","itemScope","itemType","itemProp","GatsbyImage","alt","imageCaption","dangerouslySetInnerHTML","__html","html","Bio","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}